{"name":"Dataj","tagline":"Serverside pagination for JQuery datatables plug-in with Java","body":"dataj\r\n=====\r\n\r\nServerside pagination tool for JQuery datatables plug-in written in Java.\r\n\r\nIt interprets the control variables from datatables plug-in and cuts the desired page from the result set.\r\n\r\n[Download it here](https://github.com/rasenderhase/dataj/releases).\r\n\r\nSample Usage\r\n------------\r\n\r\nJust pass a datasource, a select and the HTTP parameter map to JqPaginationQuery and create the output JSON. dataj creates the order by statements for you and cuts the desired piece from the result set. It also counts the total amount of available records.\r\n\r\nSee also [www.datatables.net with server side object data](http://www.datatables.net/release-datatables/examples/server_side/object_data.html)\r\n\r\nIt is important for dataj to have the JSON property have the same name as the table column:\r\n`w.key(\"FIRST_NAME\").value(rs.getString(\"FIRST_NAME\"));`\r\nIt uses this information for automatic order.\r\n\r\nComplete sample:\r\n\r\n```java\r\npublic class Demo extends HttpServlet {\r\n\r\n\t@Override\r\n\tprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n\t\ttry {\r\n\t\t\tDataSource dataSource = (DataSource) InitialContext.doLookup(\"java:/comp/env/JDBC\");\r\n\t\t\tresp.setCharacterEncoding(\"UTF-8\");\r\n\t\t\tresp.setHeader(\"Content-Type\", \"application/json;charset=utf-8\");\r\n\t\t\tfinal Writer writer = resp.getWriter();\r\n\t\t\tfinal JSONWriter w = new JSONWriter(writer);\r\n\t\t\tw.object();\r\n\t\t\t\r\n\t\t\tw.key(\"aaData\");\r\n\t\t\tw.array();\r\n\t\t\tListPage<Object> page = new JqPaginationQuery<Object>(dataSource, \"select * from employees\", req.getParameterMap()) {\r\n\t\t\t\t@Override\r\n\t\t\t\tprotected Object mapRow(ResultSet rs) throws SQLException {\r\n\t\t\t\t\tw.object();\r\n\t\t\t\t\tw.key(\"FIRST_NAME\").value(rs.getString(\"FIRST_NAME\"));\r\n\t\t\t\t\tw.key(\"LAST_NAME\").value(rs.getString(\"LAST_NAME\"));\r\n\t\t\t\t\tw.key(\"BIRTHDAY\").value(new SimpleDateFormat().format(rs.getDate(\"BIRTHDAY\")));\r\n\t\t\t\t\t//... and so on\r\n\t\t\t\t\tw.endObject();\r\n\t\t\t\t\treturn null; //return value not needed because content is directly put to JSON output\r\n\t\t\t\t}\r\n\t\t\t}.execute();\r\n\t\t\tw.endArray();\r\n\t\t\tw.key(\"iTotalRecords\").value(page.getTotalRecords());\r\n\t\t\tw.key(\"iTotalDisplayRecords\").value(page.getTotalDisplayRecords());\r\n\t\t\tw.key(\"sEcho\").value(page.getEcho());\r\n\t\t\tw.endObject();\r\n\t\t\twriter.flush();\r\n\t\t} catch (SQLException ex) {\r\n\t\t\tthrow new ServletException(\"DB access failed\", ex);\r\n\t\t} catch (NamingException e) {\r\n\t\t\tthrow new ServletException(\"Lookup failed\", e);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\r\n\r\nThis may result in an SQL statement like:\r\n```SQL\r\nselect * from employees order by LAST_NAME asc fetch first 21 rows only\r\n```\r\n\r\nSQL count statement for total available records:\r\n```SQL\r\nselect count(1) from (select 1 from (select * from employees) xy ) xy\r\n```\r\nThe count query\r\n* is executed in its own thread\r\n* has no order by clause\r\n\r\nfor performance reasons.\r\n\r\nFor class JSONWriter refer to https://github.com/douglascrockford/JSON-java .\r\n\r\nSwing client\r\n------------\r\n\r\nInitialization code inside your panel\r\n\r\n```java\r\n\r\n\t\t//server-side sorter with initial page size 25\r\n\t\tServerTableRowSorter sorter = new ServerTableRowSorter(25, tableModel, \r\n\t\t\t\tnew String [] {\r\n\t\t\t\t\"FIRST_NAME\",\r\n\t\t\t\t\"LAST_NAME\",\r\n\t\t\t\t\"BIRTHDAY\"\r\n\t\t});\r\n\t\t// initial sorting\r\n\t\tList<SortKey> initialSortKeys = new ArrayList<SortKey>();\r\n\t\tinitialSortKeys.add(new SortKey(0, SortOrder.ASCENDING));\r\n\t\tsorter.setSortKeys(initialSortKeys);\r\n\t\t\r\n\t\t// table and table model\r\n\t\tTableModel tableModel = ...\r\n\t\tJTable table = new JTable(tableModel);\r\n\t\ttable.setRowSorter(sorter);\r\n\t\tsorter.addRowSorterListener(this);\r\n\t\t\r\n\t\t// pagination panel. place it below the table or wherever you want\r\n\t\tPaginationPanel paginationPanel = new PaginationPanel(sorter);\r\n\t\t\r\n\t\t// page display length selection combobox. place it above the table...\r\n\t\tDisplayLengthSelectionPanel dlsPanel = new DisplayLengthSelectionPanel(sorter);\r\n\r\n```\r\n\r\nThe `RowSorterListener`\r\n```java\r\n\t@Override\r\n\tpublic void sorterChanged(RowSorterEvent e) {\r\n\t\tMap<String, String[]> parameters = sorter.getParameters();\r\n\t\t// send parameters to server or call pagination select directly...\r\n\t\t\r\n\t\t// e.g....\r\n\t\tListPage<MyDto> page = getDaoFactory().getMyDao().selectPage(dataSource, parameters);\r\n\t\ttableModel.setTableData(page);\r\n\t\tpaginationPanel.update(page);\t//updates pagination text (1 to 25 records of totally 387) and previous/next button enabling\r\n\t}\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}